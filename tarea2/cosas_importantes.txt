#0=(aEnv
    (list
     (cons
      'length
      (clousureV '(n) (mtch (id 'n) (list (cse (constrP 'Empty '()) (num 0)) (cse (constrP 'Cons (list (idP 'm1) (idP 'm2))) (prim-app '+ (list (num 1) (app (id 'length) (list (id 'm2)))))))) #0#))
     (cons 'Cons? (clousureV 'Y #f #0#))
     (cons 'Cons (clousureV #1='(n1 rec) (structV 'List 'Cons #1#) #0#))
     (cons 'Empty? (clousureV 'Y #f #0#))
     (cons 'Empty (clousureV '() (structV 'List 'Empty '()) #0#))
     (cons 'List? (clousureV 'X #f #0#)))
    (mtEnv))




(lcal
(list 
(dfine 'funcion (fun '(x (lazy y)) (id 'x)))
(dfine 'x (app (id 'funcion) (list (num 1) (prim-app '/ (list (num 1) (num 0))))))) (id 'x))
> 



    
;sacar :: List[symbol and list] -> List[symbol]
;saca el valor de una list(list x (list 'lazy y)) -> (list x y)
(define (sacar l)
  (if (empty? l)
      '()
      (cond
        [(symbol? l ) l ]
        [else
         (let ([ val (car l) ])
           (cond
             [(symbol? val ) (cons val (sacar  (cdr l)))]
             [else           (cons (second val) (sacar  (cdr l)))]))])

;crecl :: fun -> clousure
;funcion que crea clausura para funciones
(define (creacl funcion env)    ;(fun ids body)
     (clousureV (fun-id funcion )
                (fun-body funcion)
                env))


;guarda-list-expr :: List[arg] List[expr] -> List[expr y exprV]
;funcion encargada de dejar en la lista el valor numerico o la expresion/contrato, es asi como se van a guardar en el ambiente
(define (guarda-list-expr arg arg-expr-list fenv)     ;arg = (list x (lazy y))
  (if (empty? arg)                                    ;arg-expr-list = (list (num 1 ) (prim-app ...))
      '()
      (cond
        [(symbol? arg ) arg ]
        [else
         (let ([id (car arg)  ]
               [val(car arg-expr-list) ])
           (cond
             [(symbol? id) (cons (interp val fenv)   (guarda-list-expr (cdr arg ) (cdr arg-expr-list) fenv)  )   ]
             [ else   (cons (exprV val fenv (box #f)) (guarda-list-expr (cdr arg ) (cdr arg-expr-list) fenv)  )    ]))])
        