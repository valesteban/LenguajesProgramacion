#lang play

(print-only-errors #t)

#|                                              SRC                             EXPR
<expr>   ::= <num>                              3                             (num 3)                    numero
           | <id>                               x                             (id x)                     identificador 
           | <bool>                             true                          (bool true)
           | {<unop> <expr>}                    {add1 3}                      (add1 3)
           | {<binop> <expr> <expr>}            {+ 3 4}                       (add 3 4)
           | {if <expr> <expr> <expr>}          {if {< x y} y x}              (if (binop '< (id x) (id y))  (id x) (id y))
           | {with {{<id> <expr>}*} <expr>}     {with {{x 5} {y 7} {z 42}} z} (with ())
           | {<id> <expr>*}                     { sum {x y z}}
|#

(deftype Expr
  [num n]                       ;(num 5)
  [id x]                        ;(id f) 
  [bool l]                      ;(bool true)|(bool false)
  [unop op e]                   ;(unop add1 3)
  [binop op l r]                ;(binop add 6 8) 
  [iff c t f]                    ;(if ()) 
  [with list-id body]           ;(with (( x (num5))(y(num 6)) (z(num 8))) (add x y z) )      
  [app fname list-id])          ;(app f (((id x)(num5))((id y)(num 6)) ((id z)(num 8))))         ; en este caso la exp sera una lista



;<binop>  ::= + | - | * | / | && | = | < | ...
;PARSE DE BINOPS
(define (parse-binop bin)
  (match bin
    ['+ +]
    ['- -]
    ['* *]
    ['/ /]
    ['&& (lambda (x y) (and x y))]   ;?????????????????????????????????????????????VER Q ONDA ESTO   usa lambda
    ['= =]  
    ['< <]
    ['> >]
    )
  )
;DEFINIMOS BINOPS 
(define binops (list '+ '- '* '/ '&& '= '< '>))

; TYPE CHECKER 
(define (is-binop? x) (member x binops))

;<unop>   ::= ! | add1 | sub1
(define (parse-unop bin)
  (match bin
    ['add1 add1]
    ['sub1 sub1]
    [! not] 
    )
  )
;DEFINICION DE UNOPS
(define unops (list 'add1 'sub1 '!))          ;funciona

;TYPE CHECKER DE UNOPS
(define (is-unop? x) (member x unops))        ;funciona



;DEFINICIÓN  DE FUNCIONES
;<fundef> ::= {define {<id> <id>*} <expr>}      
(deftype FunDef
  (fundef name list-param body))

;PARCE FUNCIONES
;parse-fun:: src -> FunDef    ; {define {sum x y z} {+ x {+ y z}}}  (fundef fname (list x y z) ... )
;(define  (parse-fun fun)
;  (fundef (first (second fun)) (cdr(second fun)) (parse-expr (third fun)) ));(fundef fname (parse-expr listp) (parse-expr b))]))

;BUSCA LA FUNCIÓNE N NUESTRA LISTA DE FUNCIONES
;lookup-fundef :: Sym List[FunDef] -> FunDef (o error)
(define (lookup-fundef f fundefs)
  (match fundefs
    ['() (error "undefined function:" f)]
    [(cons fd fds) (if (equal? f (fundef-name fd))
                       fd
                       (lookup-fundef f fds))]))

;PARSE DE LAS EXPRESIONES
;pase-expr: src -> Expr
(define (parse-expr src)
  (match src
    [(? number?) (num src)]
    [(? symbol?) (id src)]
    [(? boolean?)(bool src)]                          
    [(list (? is-binop? op) l r) (binop (parse-binop op) (parse-expr l) (parse-expr r))]
    [(list (? is-unop? op) e) (unop (parse-unop op) (parse-expr e))]
    [(list 'if c t f) (iff (parse-expr c) (parse-expr t) (parse-expr f))]
    [(list 'with (? list? id ) b)
     (with (map parse-id id) (parse-expr b))]
    [(list 'define list1 exp )  (fundef (first (second src)) (cdr(second src)) (parse-expr exp)) ] ;parce de funciones
    [(list fname list-arg ...)
     (app fname (map parse-expr list-arg) )]
  )
)


;CREAMOS TIPO PROG
;<prog>   ::= {<fundef>* <expr>}
(deftype prog
  (program list-fun expr ))

;PARSE PROGRAMA
; parse-prog :: src -> prog
(define (parse-prog src )
  (match src
     [(list x ... n) (program (map parse-expr x) (parse-expr n))] )
 )


;PARSE Id
;FUNCION QUE SE ENCARGA DE PARSEAR LOS ELEMENTOS DE MI LISTA DE IDENTIFICADORES
(define (parse-id pair)
  (cons (car pair) (parse-expr (second pair))))

;CREACION TIPOS ENV
;<env>:: (mtEnv)
;       | (aEnv <id> <val> <env>)

  (deftype Env
  (mtEnv)
  (aEnv id val env))

;CREAMOS LOS AMBIENTES
(define empty-env (mtEnv))
(define extended-env aEnv)

;FUNCION QUE BUSCA EN EL AMBIENTE UN ID (aEnv (list (cons x (num 1)) (cons y (num2))    (aEnv (list .....  ))    ))
(define (env-lookup x env)
  (match env
    [(mtEnv) (error 'env-lookup "free identifier: ~a" x)]
    [(aEnv id val rest)
     (if (eq? id x)
         val
         (env-lookup x rest))]))

;INTERPRETE
;interp :: prog -> val           prog (program   (list funcion1 funcion 2) expr )

(define (interp-expr expr listfun env)
  (match expr
    [(num n) n]
    [(bool l) l]
    [(id y) (env-lookup y env)] ;aqui buscar el id y si esta lo devuelve (el numero)
    [(binop op l r) (op (interp-expr l listfun env) (interp-expr r listfun env)) ]
    [(unop op f) (op (interp-expr f listfun env ))]
    [(with listidv body)                    ;(with (list (cons 'x (num 5)) (cons 'y (num 7))) (id x))
     (interp-expr body listfun (guardar-id-val listidv env listfun ))]
    [(app fname  listnum)
     (def (fundef _ listarg body) (lookup-fundef fname listfun))
     (interp-expr body listfun (guardar-id-val-fun listarg listnum env empty-env listfun))]
    [(iff cond t f) (if (interp-expr cond listfun env)
                        (interp-expr t listfun env)
                        (interp-expr f listfun env))];   [iff c t f] 

    [(cons x expr) (cons x (interp-expr expr))]
    )
  )

;INTERPRETE FUNCIONES



;guaradar-id-val:: List[cons] Env List[fundef] -> Env
;dada dos listas de pares que contienen un identidficador y una expresion , se extiende el ambiente agregando estosvalores
(define (guardar-id-val list env  listfun)  
  (if (empty? list)
      env
      (let ((p (first list)))
        ( guardar-id-val (cdr list) (extended-env (car p ) (interp-expr (cdr p ) listfun env) env) listfun) )
      )
  )

;guaradar-id-val-fun:: List[atom] List[expr] Env Env List[fundef] -> Env
;dada dos listas uan con identificadores y otra de los respectivos valores de estos mismos, extiende el ambiente env-dentrof
;con los valoreas antes mensionados
  (define (guardar-id-val-fun listarg listnum env-val env-dentrof listfun)
    (if (empty? listarg)
        env-dentrof
        (let ((arg (first listarg))
              (val (first listnum)))
        (guardar-id-val-fun (cdr listarg) (cdr listnum) env-val (extended-env arg (interp-expr val listfun env-val) env-dentrof) listfun) )
      )
  )
;INTERP PROGRAMA
(define (interp-prog prog)
  (interp-expr (program-expr prog) (program-list-fun prog)  empty-env))

;DEFINICION DE TYPOS
(deftype Type
  [Num]
  [Bool]
  [Any])

;typeof :Expr -> Type (o error)
(define (typeof expr)
  (match expr
    [(num n) (Num)]
    [(id x) (Num)] ;suponiendo q siempre se remplazan los id por numero
    [(bool l) (Bool)]
    [(unop op l) (let ((val (typeof l)))
                   (cond
                     [(equal? op add1)     (if (Num? val) (Num) (error "type error: expected Num got bool"))  ]
                     [(equal? op sub1)     (if (Num? val) (Num) (error "type error: expected Num got bool")) ]
                     [(equal? op not)      (if (Bool? val) (Bool) (error "type error: expected Bool got Num"))]
                     )
                   )]
    [(binop op l r) (let ((valizq (typeof l))
                          (valder (typeof r)))
                      (cond
                        [(equal? op +)     (if (and (Num? valizq) (Num? valder)) (Num) (error "type error: expected Num got bool")) ]
                        [(equal? op -)     (if (and (Num? valizq) (Num? valder)) (Num) (error "type error: expected Num got bool")) ]
                        [(equal? op *)     (if (and (Num? valizq) (Num? valder)) (Num) (error "type error: expected Num got bool")) ]
                        [(equal? op /)     (if (and (Num? valizq) (Num? valder)) (Num) (error "type error: expected Num got bool")) ]
                        [(equal? op <)     (if (and (Num? valizq) (Num? valder)) (Num) (error "type error: expected Num got bool")) ]
                        [(equal? op >)     (if (and (Num? valizq) (Num? valder)) (Num) (error "type error: expected Num got bool")) ]
                        [(equal? op =)     (if (and (Num? valizq) (Num? valder)) (Num) (error "type error: expected Num got bool")) ]
                        [else (if (and (Bool? valizq) (Bool? valder)) (Bool) (error "type error: expected Bool got Num"))]   
                        ))]
    [(with listval body) (typeof body)]
    [(app fname listval ) 'nose] ;se asume que no se sabe
    )
  )


;RUN
(define (run prog)
  (let ([expr (program-expr (parse-prog prog))])
    (let ([ t (typeof expr)])
      (interp-prog (parse-prog prog)))
    )
  )

