
;run :: src -> structV | val | string
;parsea, interpreta y convierte sructuras a valores string mas amigables
(define(run prog [flag ""])
  (let ([l `{local {{datatype List 
                  {Empty} 
                  {Cons n1 rec}}
                {define length {fun {n} 
                               {match n
                                 {case {Empty} => 0 }
                                 {case {Cons m1 m2 } => {+ 1 { length m2 } }}}}}} ,prog }])
    
    (let ([val (interp (parse l) empty-env ) ])
      (cond
        [(equal? "ppwu" flag) (if (number? val )  val (pretty-printing val ))]
        [(equal? "pp" flag)
         (cond
           [(number? val )  val]
           [(equal? (structV-name val)'List) (listasbonitas (prr val ))]
           [else
            (def listaarg (strictver2 (structV-values val)) ) ;primero queremos evaluar las promesas o sacarlas nomas
            (format "{ ~a ~a } "(structV-variant val) (tt2 listaarg (structV-variant val) ))])]
        [else  (saca-expr-de-exprV val) ]))))   ;saca-expr-de-exprV  lo puse aca porque si no me devolvia una structu donde algunos valores eran exprV y eso era gigante
 
(lcal
 (list
  (datatype 'stream (list (variant 'S '(a (lazy b)))))
  (dfine 'make-stream (fun '(hd tl) (app (id 'S) (list (id 'hd) (id 'tl)))))
  (dfine 'stream-hd (fun '(stream) (mtch (id 'stream) (list (cse (constrP 'S (list (idP 'uno) (idP 'dos))) (id 'uno))))))
  (dfine 'stream-tl (fun '(stream) (mtch (id 'stream) (list (cse (constrP 'Cons (list (idP 'uno) (idP 'dos))) (id 'dos))))))
  (dfine 'ones (app (id 'make-stream) (list (num 1) (id 'ones)))))
 (num 1))




#Remove punctuations = !"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~

def limpiar(text):
  text = re.sub("@[A-Za-z0-9]+","",text) #Remove @ sign
  text= re.sub(r'https.?://[^\s]+[\s]?', '', text) #eliminar lis links y esas cosas raras
  text = re.sub(r'pic.twitter.com/[\w]*',"", text) #elimina imagenes
  text  = "".join([char for char in text if char not in string.punctuation]) #eliminamos todas las cosas raras restantes
  text = re.sub('[0-9]+', '', text) #elimina numeros
  return text

data['text_clean'] = data['text'].apply(lambda x: limpiar(x))
    
data[['text','text_clean']]





(aEnv
 '((stream-tl . #<procedure:.../tarea2/main_v2.rkt:171:6>)
   (stream-hd . #<procedure:.../tarea2/main_v2.rkt:171:6>)
   (make-stream . #<procedure:.../tarea2/main_v2.rkt:171:6>)
   (S? . #<procedure:.../tarea2/main_v2.rkt:281:14>)
   (S . #<procedure:.../tarea2/main_v2.rkt:273:16>)
   (stream? . #<procedure:.../tarea2/main_v2.rkt:262:15>))
 (aEnv
  '((length . #<procedure:.../tarea2/main_v2.rkt:171:6>)
    (Cons? . #<procedure:.../tarea2/main_v2.rkt:281:14>)
    (Cons . #<procedure:.../tarea2/main_v2.rkt:273:16>)
    (Empty? . #<procedure:.../tarea2/main_v2.rkt:281:14>)
    (Empty . #<procedure:.../tarea2/main_v2.rkt:273:16>)
    (List? . #<procedure:.../tarea2/main_v2.rkt:262:15>))
  (mtEnv)))
(structV 'T 'C (list 0 (prim-app '/ (list (num 1) (num 0)))))









